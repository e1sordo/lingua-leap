import { numberToWords } from '@/utils/numberToWords';

describe('numberToWords', () => {
    const testCases: Record<number, string> = {
        '-1': "menos uno",
        0: "cero",
        1: "uno",
        2: "dos",
        3: "tres",
        4: "cuatro",
        5: "cinco",
        6: "seis",
        7: "siete",
        8: "ocho",
        9: "nueve",
        10: "diez",
        11: "once",
        12: "doce",
        13: "trece",
        14: "catorce",
        15: "quince",
        16: "dieciséis",
        17: "diecisiete",
        18: "dieciocho",
        19: "diecinueve",
        20: "veinte",
        21: "veintiuno",
        22: "veintidós",
        23: "veintitrés",
        24: "veinticuatro",
        25: "veinticinco",
        26: "veintiséis",
        27: "veintisiete",
        28: "veintiocho",
        29: "veintinueve",
        30: "treinta",
        31: "treinta y uno",
        32: "treinta y dos",
        39: "treinta y nueve",
        42: "cuarenta y dos",
        80: "ochenta",
        90: "noventa",
        99: "noventa y nueve",
        100: "ciento",
        101: "ciento uno",
        111: "ciento once",
        120: "ciento veinte",
        121: "ciento veintiuno",
        200: "doscientos",
        300: "trescientos",
        400: "cuatrocientos",
        500: "quinientos",
        600: "seiscientos",
        700: "setecientos",
        800: "ochocientos",
        900: "novecientos",
        909: "novecientos nueve",
        919: "novecientos diecinueve",
        990: "novecientos noventa",
        999: "novecientos noventa y nueve",
        1000: "mil",
        2000: "dos mil",
        4000: "cuatro mil",
        5000: "cinco mil",
        11000: "once mil",
        21000: "veintiún mil",
        28000: "veintiocho mil",
        31000: "treinta y un mil",
        32000: "treinta y dos mil",
        39000: "treinta y nueve mil",
        42000: "cuarenta y dos mil",
        999000: "novecientos noventa y nueve mil",
        999999: "novecientos noventa y nueve mil novecientos noventa y nueve",
        1000000: "un millón",
        2000000: "dos millones",
        4000000: "cuatro millones",
        5000000: "cinco millones",
        100100100: "ciento millones ciento mil ciento",
        500500500: "quinientos millones quinientos mil quinientos",
        606606606: "seiscientos seis millones seiscientos seis mil seiscientos seis",
        999000000: "novecientos noventa y nueve millones",
        999000999: "novecientos noventa y nueve millones novecientos noventa y nueve",
        999999000: "novecientos noventa y nueve millones novecientos noventa y nueve mil",
        999999999: "novecientos noventa y nueve millones novecientos noventa y nueve mil novecientos noventa y nueve",
        1174315110: "un mil millones ciento setenta y cuatro millones trescientos quince mil ciento diez",
        1174315119: "un mil millones ciento setenta y cuatro millones trescientos quince mil ciento diecinueve",
        15174315119: "quince mil millones ciento setenta y cuatro millones trescientos quince mil ciento diecinueve",
        35174315119: "treinta y cinco mil millones ciento setenta y cuatro millones trescientos quince mil ciento diecinueve",
        935174315119: "novecientos treinta y cinco mil millones ciento setenta y cuatro millones trescientos quince mil ciento diecinueve",
        2935174315119: "dos billones novecientos treinta y cinco mil millones ciento setenta y cuatro millones trescientos quince mil ciento diecinueve",
    };

    Object.entries(testCases).forEach(([input, expectedOutput]) => {
        it(`should convert ${input} to "${expectedOutput}"`, () => {
            expect(numberToWords(Number(input), false)).toBe(expectedOutput);
        });
    });
});


describe('ordinalNumberToWords', () => {
    const testCases: Record<number, string> = {
        1: "primero",
        2: "segundo",
        3: "tercero",
        4: "cuarto",
        5: "quinto",
        6: "sexto",
        7: "séptimo",
        8: "octavo",
        9: "noveno",
        10: "décimo",
        11: "undécimo",
        12: "duodécimo",
        13: "decimotercero",
        14: "decimocuarto",
        15: "decimoquinto",
        16: "decimosexto",
        17: "decimoséptimo",
        18: "decimooctavo",
        19: "decimonoveno",
        20: "vigésimo",
        21: "vigésimo primero",
        22: "vigésimo segundo",
        23: "vigésimo tercero",
        24: "vigésimo cuarto",
        25: "vigésimo quinto",
        26: "vigésimo sexto",
        27: "vigésimo séptimo",
        28: "vigésimo octavo",
        29: "vigésimo noveno",
        30: "trigésimo",
        31: "trigésimo primero",
        32: "trigésimo segundo",
        39: "trigésimo noveno",
        42: "cuadragésimo segundo",
        54: "quincuagésimo cuarto",
        63: "sexagésimo tercero",
        77: "septuagésimo séptimo",
        81: "octogésimo primero",
        96: "nonagésimo sexto",
        100: "centésimo",
        101: "centésimo primero",
        111: "centésimo undécimo",
        112: "centésimo duodécimo",
        113: "centésimo decimotercero",
        120: "centésimo vigésimo",
        200: "ducentésimo",
        300: "tricentésimo",
        400: "cuadrigentésimo",
        500: "quingentésimo",
        600: "sexcentésimo",
        700: "septingentésimo",
        800: "octogentésimo",
        900: "noningentésimo",
        999: "noningentésimo nonagésimo noveno",
        1000: "milésimo",
        2000: "dos milésimo",
        4000: "cuatro milésimo",
        5000: "cinco milésimo",
        1000000: "millonésimo"
    };

    Object.entries(testCases).forEach(([input, expectedOutput]) => {
        it(`should convert ${input} to "${expectedOutput}"`, () => {
            expect(numberToWords(Number(input), true)).toBe(expectedOutput);
        });
    });
});